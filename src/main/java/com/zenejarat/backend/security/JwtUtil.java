package com.zenejarat.backend.security;

import io.jsonwebtoken.*;
import org.springframework.stereotype.Component;
import java.util.Base64;
import java.util.Date;
import java.util.function.Function;

@Component
public class JwtUtil {

    private final String jwtSecret = Base64.getEncoder().encodeToString("mySecretKey".getBytes()); // üîπ Titkos kulcs biztons√°gosabban
    private final long jwtExpirationMs = 86400000; // üîπ 24 √≥ra (milliszekundumban)

    // üîπ **JWT gener√°l√°sa**
    public String generateJwtToken(String username) {
        return Jwts.builder()
                .setSubject(username)
                .setIssuedAt(new Date())
                .setExpiration(new Date(System.currentTimeMillis() + jwtExpirationMs))
                .signWith(SignatureAlgorithm.HS256, jwtSecret) // üîπ HS256 haszn√°lata (aj√°nlott)
                .compact();
    }

    // üîπ **Felhaszn√°l√≥n√©v kinyer√©se a JWT tokenb≈ël**
    public String extractUsername(String token) {
        return extractClaim(token, Claims::getSubject);
    }

    // üîπ **Token lej√°rati idej√©nek kinyer√©se**
    public Date extractExpiration(String token) {
        return extractClaim(token, Claims::getExpiration);
    }

    // üîπ **√Åltal√°nos met√≥dus a token claim-ek kibont√°s√°ra**
    public <T> T extractClaim(String token, Function<Claims, T> claimsResolver) {
        final Claims claims = extractAllClaims(token);
        return claimsResolver.apply(claims);
    }

    private Claims extractAllClaims(String token) {
        return Jwts.parser()
                .setSigningKey(jwtSecret)
                .parseClaimsJws(token)
                .getBody();
    }

    // üîπ **Token √©rv√©nyess√©g√©nek ellen≈ërz√©se**
    public boolean validateJwtToken(String token) {
        try {
            Jwts.parser().setSigningKey(jwtSecret).parseClaimsJws(token);
            return true;
        } catch (ExpiredJwtException e) {
            System.out.println("Hiba: A token lej√°rt!");
        } catch (UnsupportedJwtException e) {
            System.out.println("Hiba: Nem t√°mogatott JWT form√°tum!");
        } catch (MalformedJwtException e) {
            System.out.println("Hiba: Hib√°s JWT token!");
        } catch (SignatureException e) {
            System.out.println("Hiba: Helytelen al√°√≠r√°s!");
        } catch (IllegalArgumentException e) {
            System.out.println("Hiba: √úres vagy null token!");
        }
        return false;
    }
}
