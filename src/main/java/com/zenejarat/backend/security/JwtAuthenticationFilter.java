package com.zenejarat.backend.security;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import java.io.IOException;

@Component // Ezzel regisztr√°lom a sz≈±r≈ët a Spring kontextusba.
public class JwtAuthenticationFilter extends OncePerRequestFilter {

    @Autowired
    private JwtUtil jwtUtil; // Ezzel dolgozom fel √©s ellen≈ërz√∂m a JWT tokeneket.

    @Autowired
    private UserDetailsService userDetailsService; // Ezzel t√∂lt√∂m be a felhaszn√°l√≥i adatokat.

    @Override
    protected void doFilterInternal(HttpServletRequest request,
                                    HttpServletResponse response,
                                    FilterChain filterChain)
            throws ServletException, IOException {

        String path = request.getRequestURI();

        // üîπ Ha a k√©r√©s Swagger-hez tartozik, nem futtatom le a JWT ellen≈ërz√©st.
        if (path.startsWith("/v3/api-docs") || path.startsWith("/swagger-ui") || path.equals("/swagger-ui.html")) {
            filterChain.doFilter(request, response);
            return;
        }

        // üîπ Kinyerem az Authorization fejl√©cet
        String authHeader = request.getHeader("Authorization");

        // Ha nincs fejl√©c vagy nem Bearer token, tov√°bbengedem a k√©r√©st ellen≈ërz√©s n√©lk√ºl.
        if (authHeader == null || !authHeader.startsWith("Bearer ")) {
            filterChain.doFilter(request, response);
            return;
        }

        // Lev√°gom a ‚ÄûBearer ‚Äù r√©szt √©s kiszedem a tokent
        String jwt = authHeader.substring(7);
        String username;

        try {
            username = jwtUtil.extractUsername(jwt); // Kinyerem a felhaszn√°l√≥nevet a tokenb≈ël.
        } catch (Exception e) {
            System.out.println("‚ö†Ô∏è Hib√°s vagy lej√°rt JWT token: " + e.getMessage());
            filterChain.doFilter(request, response);
            return;
        }

        // üîê Ha m√©g nincs bejelentkezve a felhaszn√°l√≥, megpr√≥b√°lom autentik√°lni a JWT alapj√°n
        if (username != null && SecurityContextHolder.getContext().getAuthentication() == null) {
            UserDetails userDetails = userDetailsService.loadUserByUsername(username);

            if (jwtUtil.validateJwtToken(jwt)) {
                // L√©trehozok egy Spring Security autentik√°ci√≥s tokent
                UsernamePasswordAuthenticationToken authToken =
                        new UsernamePasswordAuthenticationToken(userDetails, null, userDetails.getAuthorities());

                // Be√°ll√≠tom a r√©szleteket, p√©ld√°ul az IP c√≠met, b√∂ng√©sz≈ët stb.
                authToken.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));

                // Be√°ll√≠tom az autentik√°ci√≥t a SecurityContext-be
                SecurityContextHolder.getContext().setAuthentication(authToken);
            } else {
                System.out.println("‚ö†Ô∏è Token √©rv√©nytelen vagy lej√°rt.");
            }
        }

        // Tov√°bbengedem a k√©r√©st a sz≈±r≈ël√°nc k√∂vetkez≈ë elem√©hez
        filterChain.doFilter(request, response);
    }
}
