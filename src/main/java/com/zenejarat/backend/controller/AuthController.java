package com.zenejarat.backend.controller;

import com.zenejarat.backend.model.User;
import com.zenejarat.backend.security.JwtUtil;
import com.zenejarat.backend.service.UserService;
//import com.zenejarat.backend.payload.LoginRequest;
//import com.zenejarat.backend.payload.LoginResponse;
import jakarta.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.bind.annotation.*;

import java.util.Optional;

@RestController // Ezzel jelzem, hogy ez egy REST vez√©rl≈ë oszt√°ly.
@RequestMapping("/api/auth") // Az √∂sszes v√©gpont az /api/auth √∫tvonalon √©rhet≈ë el.
public class AuthController {

    @Autowired
    private AuthenticationManager authenticationManager; // Ezzel kezelem a hiteles√≠t√©st.

    @Autowired
    private JwtUtil jwtUtil; // Ezzel gener√°lok √©s ellen≈ërz√∂k JWT tokeneket.

    @Autowired
    private UserService userService; // Ezzel kezelem a felhaszn√°l√≥kkal kapcsolatos m≈±veleteket.

    @Autowired
    private PasswordEncoder passwordEncoder; // Ezzel k√≥dolom a jelszavakat regisztr√°ci√≥kor.

    // ‚úÖ Regisztr√°ci√≥ v√©gpont
    @PostMapping("/register")
    public ResponseEntity<?> registerUser(@Valid @RequestBody User user) {
        // Ellen≈ërz√∂m, hogy a felhaszn√°l√≥n√©v foglalt-e.
        if (userService.isUsernameTaken(user.getUsername())) {
            return ResponseEntity.badRequest().body("Hiba: A felhaszn√°l√≥n√©v m√°r foglalt!");
        }
        // Ellen≈ërz√∂m, hogy az e-mail c√≠m m√°r haszn√°latban van-e.
        if (userService.isEmailTaken(user.getEmail())) {
            return ResponseEntity.badRequest().body("Hiba: Az e-mail m√°r foglalt!");
        }

        // Jelsz√≥t titkos√≠tok a ment√©s el≈ëtt.
        user.setPassword(passwordEncoder.encode(user.getPassword()));

        // üîí Alap√©rtelmezett szerepk√∂rt √°ll√≠tok be, ha nincs megadva.
        if (user.getRole() == null) {
            user.setRole(com.zenejarat.backend.model.Role.ROLE_USER);
        }

        // Elmentem a felhaszn√°l√≥t az adatb√°zisba.
        userService.saveUser(user);
        return ResponseEntity.ok("Sikeres regisztr√°ci√≥!");
    }

    // üîë Bejelentkez√©si v√©gpont + JWT token gener√°l√°s
    @PostMapping("/login")
    public ResponseEntity<?> authenticateUser(@Valid @RequestBody LoginRequest loginRequest) {
        try {
            // Megpr√≥b√°lom hiteles√≠teni a felhaszn√°l√≥t a megadott adatokkal.
            Authentication authentication = authenticationManager.authenticate(
                    new UsernamePasswordAuthenticationToken(loginRequest.getUsername(), loginRequest.getPassword())
            );

            // Sikeres hiteles√≠t√©s ut√°n JWT tokent gener√°lok.
            String jwt = jwtUtil.generateJwtToken(loginRequest.getUsername());
            return ResponseEntity.ok(new LoginResponse(jwt));

        } catch (BadCredentialsException e) {
            // Ha a hiteles√≠t√©s sikertelen, hib√°t k√ºld√∂k vissza.
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Hiba: Hib√°s felhaszn√°l√≥n√©v vagy jelsz√≥!");
        }
    }

    // üë§ Visszaadom a jelenleg bejelentkezett felhaszn√°l√≥ adatait a JWT token alapj√°n
    @GetMapping("/me")
    public ResponseEntity<?> getCurrentUser(@RequestHeader("Authorization") String token) {
        try {
            // Kinyerem a felhaszn√°l√≥nevet a tokenb≈ël.
            String username = jwtUtil.extractUsername(token.replace("Bearer ", ""));
            Optional<User> user = userService.getUserByUsername(username);

            // Ha nincs ilyen felhaszn√°l√≥, 404-es hib√°t k√ºld√∂k.
            if (user.isEmpty()) {
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Felhaszn√°l√≥ nem tal√°lhat√≥.");
            }

            // Visszaadom a felhaszn√°l√≥ adatait.
            return ResponseEntity.ok(user.get());
        } catch (Exception e) {
            // Ha a token hib√°s vagy lej√°rt, visszautas√≠tom a k√©r√©st.
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Hib√°s vagy lej√°rt token.");
        }
    }
}
