package com.zenejarat.backend.controller;

import com.zenejarat.backend.model.Event;
import com.zenejarat.backend.service.EventService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize; //  Ezzel tudom v√©deni a v√©gpontokat
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;

@RestController // Ezzel jelzem, hogy ez egy REST t√≠pus√∫ vez√©rl≈ëoszt√°ly.
@RequestMapping("/api/events") // Az √∂sszes v√©gpont az /api/events √∫tvonal al√° fog tartozik.
public class EventController {

    private final EventService eventService;

    @Autowired
    public EventController(EventService eventService) {
        // Konstruktoron kereszt√ºl kapom meg az EventService p√©ld√°nyt
        this.eventService = eventService;
    }

    @GetMapping // Lek√©rem az √∂sszes esem√©nyt. Ez publikus, nincs korl√°tozva.
    public List<Event> getAllEvents() {
        // Megh√≠vom a service r√©teget, √©s visszaadom az √∂sszes esem√©nyt
        return eventService.getAllEvents();
    }

    @GetMapping("/{id}") // Lek√©rek egy konkr√©t esem√©nyt azonos√≠t√≥ alapj√°n.
    public ResponseEntity<Event> getEventById(@PathVariable Long id) {
        // Megpr√≥b√°lom lek√©rni az esem√©nyt az id alapj√°n
        Optional<Event> event = eventService.getEventById(id);

        // Ha megtal√°ltam, visszaadom 200 OK st√°tusszal, ha nem, 404 NOT FOUND-ot k√ºld√∂k
        return event.map(ResponseEntity::ok)
                .orElseGet(() -> ResponseEntity.notFound().build());
    }

    // üîê Csak ADMIN szerepk√∂r≈± felhaszn√°l√≥k hozhatnak l√©tre esem√©nyt
    @PreAuthorize("hasRole('ADMIN')")
    @PostMapping
    public ResponseEntity<Event> createEvent(@RequestBody Event event) {
        // Megh√≠vom a service r√©teget, hogy mentse el az esem√©nyt
        Event savedEvent = eventService.saveEvent(event);

        // Visszaadom a mentett esem√©nyt 200 OK v√°laszk√©nt
        return ResponseEntity.ok(savedEvent);
    }

    // üîê Csak ADMIN friss√≠thet esem√©nyt
    @PreAuthorize("hasRole('ADMIN')")
    @PutMapping("/{id}")
    public ResponseEntity<Event> updateEvent(@PathVariable Long id, @RequestBody Event eventDetails) {
        // Megpr√≥b√°lom lek√©rni az esem√©nyt, amit friss√≠teni szeretn√©k
        Optional<Event> updatedEvent = eventService.getEventById(id)
                .map(existingEvent -> {
                    // Itt friss√≠tem a megl√©v≈ë esem√©ny mez≈ëit az √∫j adatokkal
                    existingEvent.setName(eventDetails.getName());
                    existingEvent.setDescription(eventDetails.getDescription());
                    existingEvent.setEventDate(eventDetails.getEventDate());
                    existingEvent.setVenue(eventDetails.getVenue());

                    // Mentem az √∫j adatokat √©s visszat√©rek az eredm√©nnyel
                    return eventService.saveEvent(existingEvent);
                });

        // Ha siker√ºlt friss√≠teni, visszat√©rek az √∫j esem√©nnyel, ha nem tal√°ltam, 404-et k√ºld√∂k
        return updatedEvent.map(ResponseEntity::ok)
                .orElseGet(() -> ResponseEntity.notFound().build());
    }

    //  Csak ADMIN t√∂r√∂lhet esem√©nyt
    @PreAuthorize("hasRole('ADMIN')")
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteEvent(@PathVariable Long id) {
        // Megh√≠vom a service-t, hogy t√∂r√∂lje az esem√©nyt
        eventService.deleteEvent(id);

        // Visszat√©rek √ºres (204 No Content) v√°lasszal
        return ResponseEntity.noContent().build();
    }
}
